generator client {
  provider = "prisma-client-js"
  seed     = "node prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String              @id @default(cuid())
  name                   String?
  email                  String?             @unique
  emailVerified          DateTime?
  image                  String?
  username               String?             @unique
  sex                    String?
  dob                    DateTime?
  createdAt              DateTime            @default(now())
  bannerUrl              String?
  profileImageUrl        String?
  bio                    String?
  points                 Int                 @default(0)
  country                Country?
  profileIsComplete      Boolean             @default(false)
  isWhitelisted          Boolean             @default(false)
  isAdmin                Boolean             @default(false)
  reviewRequestTokens    Int                 @default(0)
  accounts               Account[]
  Article                Article[]
  commentVotes           CommentVote[]
  sentNotifications      Notification[]      @relation("NotifierRelation")
  receivedNotifications  Notification[]      @relation("UserRelation")
  raps                   Rap[]
  rapVotes               RapVote[]
  sessions               Session[]
  socialLinks            SocialLink[]
  threads                Thread[]
  threadComments         ThreadComment[]
  threadCommmentVotes    ThreadCommentVote[]
  followed               UserFollows[]       @relation("FollowedRelation")
  followers              UserFollows[]       @relation("FollowerRelation")
  WhiteList              WhiteList?
  wall                   Wall?
  rapThread              RapThread[]
  rapReviews             RapReview[]
  collaboratedRaps       Rap[]               @relation("RapCollaborators")
  reviewRequestsSent     ReviewRequest[]     @relation("RequesterRelation")
  reviewRequestsReceived ReviewRequest[]     @relation("ReviewerRelation")
  forumThread            ForumThread[]
  reports                Report[]            @relation("ReporterRelation")
  reportsReceived        Report[]            @relation("ReportedRelation")
}

model UserFollows {
  followedId String
  followerId String
  followedAt DateTime @default(now())
  followed   User     @relation("FollowedRelation", fields: [followedId], references: [id], onDelete: Cascade)
  follower   User     @relation("FollowerRelation", fields: [followerId], references: [id], onDelete: Cascade)

  @@id([followerId, followedId])
  @@index([followedId])
}

model Rap {
  id              String          @id @default(cuid())
  title           String
  content         String
  userId          String
  coverArtUrl     String?
  status          RapStatus       @default(DRAFT)
  dateCreated     DateTime        @default(now())
  likesCount      Int             @default(0)
  soundcloudUrl   String?
  youtubeVideoId  String?
  disableComments Boolean         @default(false)
  Notification    Notification[]
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  collaborators   User[]          @relation("RapCollaborators")
  votes           RapVote[]
  thread          Thread[]
  threadComment   ThreadComment[]
  rapThread       RapThread?
  rapReviews      RapReview[]
  reviewRequests  ReviewRequest[]
  reports         Report[]

  @@index([userId, dateCreated(sort: Desc)])
}

model Thread {
  id             String          @id @default(cuid())
  type           ThreadType
  ownerId        String
  rapId          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  commentsCount  Int             @default(0)
  owner          User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  rap            Rap?            @relation(fields: [rapId], references: [id], onDelete: Cascade)
  threadComments ThreadComment[]
  wall           Wall?
  rapThread      RapThread?
  forumThread    ForumThread?
  reports        Report[]
}

// Extends Thread
model Wall {
  id       String @id @default(cuid())
  threadId String @unique
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  ownerId  String @unique
  owner    User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

// Extends Thread
model RapThread {
  id       String @id @default(cuid())
  threadId String @unique
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  rapId    String @unique
  rap      Rap    @relation(fields: [rapId], references: [id], onDelete: Cascade)
  ownerId  String
  owner    User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

// Extends Thread
model ForumThread {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  threadId      String         @unique
  thread        Thread         @relation(fields: [threadId], references: [id], onDelete: Cascade)
  ownerId       String
  owner         User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  title         String
  notifications Notification[]
}

model ThreadComment {
  id                 String              @id @default(cuid())
  content            String
  userId             String
  rapId              String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  likesCount         Int                 @default(0)
  threadId           String
  CommentVote        CommentVote[]
  notifications      Notification[]
  rap                Rap?                @relation(fields: [rapId], references: [id], onDelete: Cascade)
  thread             Thread              @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  threadCommentVotes ThreadCommentVote[]
  reports            Report[]
}

model RapVote {
  id            String         @id @default(cuid())
  type          RapVoteType
  userId        String
  rapId         String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]
  rap           Rap            @relation(fields: [rapId], references: [id], onDelete: Cascade)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, rapId])
  @@index([rapId, createdAt(sort: Desc)])
}

model CommentVote {
  id              String          @id @default(cuid())
  type            CommentVoteType
  userId          String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  threadCommentId String?
  threadComment   ThreadComment?  @relation(fields: [threadCommentId], references: [id])
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications   Notification[]

  @@unique([userId, threadCommentId])
  @@index([threadCommentId, createdAt(sort: Desc)])
}

model ThreadCommentVote {
  id              String          @id @default(cuid())
  type            CommentVoteType
  userId          String
  threadCommentId String
  createdAt       DateTime        @default(now())
  notifications   Notification[]
  threadComment   ThreadComment   @relation(fields: [threadCommentId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, threadCommentId])
  @@index([threadCommentId, createdAt(sort: Desc)])
}

model SocialLink {
  id          String         @id @default(cuid())
  userId      String
  platform    SocialPlatform
  link        String
  displayText String?
  User        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Notification {
  id                  String             @id @default(cuid())
  recipientId         String
  type                NotificationType
  read                Boolean            @default(false)
  createdAt           DateTime           @default(now())
  notifierId          String
  rapId               String?
  rapVoteId           String?
  commentVoteId       String?
  threadCommentId     String?
  threadCommentVoteId String?
  rapReviewId         Int?
  forumThreadId       String?
  commentVote         CommentVote?       @relation(fields: [commentVoteId], references: [id], onDelete: Cascade)
  notifierUser        User               @relation("NotifierRelation", fields: [notifierId], references: [id], onDelete: Cascade)
  rap                 Rap?               @relation(fields: [rapId], references: [id], onDelete: Cascade)
  rapVote             RapVote?           @relation(fields: [rapVoteId], references: [id], onDelete: Cascade)
  recipient           User               @relation("UserRelation", fields: [recipientId], references: [id], onDelete: Cascade)
  threadComment       ThreadComment?     @relation(fields: [threadCommentId], references: [id])
  threadCommentVote   ThreadCommentVote? @relation(fields: [threadCommentVoteId], references: [id])
  rapReview           RapReview?         @relation(fields: [rapReviewId], references: [id], onDelete: Cascade)
  forumThread         ForumThread?       @relation(fields: [forumThreadId], references: [id], onDelete: Cascade)

  @@index([recipientId, createdAt(sort: Desc)])
}

model Article {
  id          Int          @id @default(autoincrement())
  title       String
  subtitle    String
  content     String
  bannerImage String
  publishedAt DateTime     @default(now())
  viewCount   Int          @default(0)
  slug        String       @unique
  authorId    String
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags        ArticleTag[] @relation("ArticleToArticleTag")
}

model PulsePost {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
}

model ArticleTag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  articles Article[] @relation("ArticleToArticleTag")
}

model WhiteList {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model InviteToken {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
}

enum ThreadType {
  RAP
  WALL
  ARTICLE
  FORUM
}

enum RapVoteType {
  LIKE
}

enum CommentVoteType {
  LIKE
}

enum NotificationType {
  FOLLOW
  RAP_COMMENT
  RAP_VOTE
  COMMENT_VOTE
  FOLLOWED_USER_RAP
  WALL_COMMENT
  RAP_REVIEW
  COLLABORATOR_ADDED
  REVIEW_REQUEST_CREATED
  FORUM_MENTION
}

enum RapStatus {
  DRAFT
  PUBLISHED
}

enum Country {
  US
  UK
  CA
  AU
  ZA
  NZ
  IE
}

enum SocialPlatform {
  TWITTER
  INSTAGRAM
  FACEBOOK
  YOUTUBE
  SOUNDCLOUD
  SPOTIFY
  TIKTOK
  CUSTOM
}

model RapReview {
  id            Int            @id @default(autoincrement())
  rapId         String
  reviewerId    String
  lyricism      Decimal        @db.Decimal(3, 2)
  flow          Decimal        @db.Decimal(3, 2)
  originality   Decimal        @db.Decimal(3, 2)
  delivery      Decimal?       @db.Decimal(3, 2)
  total         Decimal        @db.Decimal(3, 2)
  writtenReview String?        @db.VarChar(300)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  reviewer      User           @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  rap           Rap            @relation(fields: [rapId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@unique([reviewerId, rapId])
}

model ReviewRequest {
  id          String              @id @default(cuid())
  rapId       String
  requesterId String
  reviewerId  String
  createdAt   DateTime            @default(now())
  status      ReviewRequestStatus
  rap         Rap                 @relation(fields: [rapId], references: [id], onDelete: Cascade)
  requester   User                @relation("RequesterRelation", fields: [requesterId], references: [id], onDelete: Cascade)
  reviewer    User                @relation("ReviewerRelation", fields: [reviewerId], references: [id], onDelete: Cascade)

  @@unique([requesterId, reviewerId, rapId])
  @@index([rapId])
}

enum ReviewRequestStatus {
  PENDING
  DECLINED
}

enum ReportType {
  HARASSMENT
  SPAM
  RULES_VIOLATION
  OTHER
}

enum ReportedEntity {
  RAP
  THREAD
  RAP_COMMENT
  WALL_COMMENT
  RAP_REVIEW
  REVIEW_REQUEST
  FORUM_THREAD
}

model Report {
  id             String         @id @default(cuid())
  type           ReportType
  reportedEntity ReportedEntity
  reporterId     String
  reportedId     String?
  rapId          String?
  threadId       String?
  commentId      String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  reporter       User           @relation("ReporterRelation", fields: [reporterId], references: [id], onDelete: Cascade)
  reported       User?          @relation("ReportedRelation", fields: [reportedId], references: [id], onDelete: Cascade)
  rap            Rap?           @relation(fields: [rapId], references: [id], onDelete: Cascade)
  thread         Thread?        @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadComment  ThreadComment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
}
