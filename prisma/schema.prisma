// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  seed     = "node prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String         @id @default(cuid())
  name                  String?
  email                 String?        @unique
  emailVerified         DateTime?
  image                 String?
  username              String?        @unique
  sex                   String?
  dob                   DateTime?
  country               String?
  city                  String?
  state                 String?
  region                Region?
  createdAt             DateTime       @default(now())
  bannerUrl             String?
  profileImageUrl       String?
  bio                   String?
  points                Int            @default(0)
  followed              UserFollows[]  @relation("FollowedRelation")
  followers             UserFollows[]  @relation("FollowerRelation")
  raps                  Rap[]
  accounts              Account[]
  sessions              Session[]
  socialLinks           SocialLink[]
  rapVotes              RapVote[]
  rapComments           RapComment[]
  commentVotes          CommentVote[]
  sentNotifications     Notification[] @relation("NotifierRelation")
  receivedNotifications Notification[] @relation("UserRelation")
  Article               Article[]
}

model UserFollows {
  followed   User     @relation("FollowedRelation", fields: [followedId], references: [id], onDelete: Cascade)
  followedId String
  follower   User     @relation("FollowerRelation", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String
  followedAt DateTime @default(now())

  @@id([followerId, followedId])
  @@index([followedId])
}

model Rap {
  id              String         @id @default(cuid())
  title           String
  content         String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  coverArtUrl     String?
  status          RapStatus      @default(DRAFT)
  dateCreated     DateTime       @default(now())
  likesCount      Int            @default(0)
  soundcloudUrl   String?
  youtubeVideoId  String?
  disableComments Boolean        @default(false)
  votes           RapVote[]
  comments        RapComment[]
  Notification    Notification[]

  @@index([userId, dateCreated(sort: Desc)])
}

model RapComment {
  id            String         @id @default(cuid())
  content       String
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  rapId         String
  rap           Rap            @relation(fields: [rapId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  commentVotes  CommentVote[]
  likesCount    Int            @default(0)
  notifications Notification[]

  @@index([rapId, createdAt(sort: Desc)])
}

enum RapVoteType {
  LIKE
}

model RapVote {
  id            String         @id @default(cuid())
  type          RapVoteType
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  rapId         String
  rap           Rap            @relation(fields: [rapId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]

  @@unique([userId, rapId])
  @@index([rapId, createdAt(sort: Desc)])
}

enum CommentVoteType {
  LIKE
}

model CommentVote {
  id            String          @id @default(cuid())
  type          CommentVoteType
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId     String
  comment       RapComment      @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  notifications Notification[]

  @@unique([userId, commentId])
  @@index([commentId, createdAt(sort: Desc)])
}

model SocialLink {
  id          String         @id @default(cuid())
  userId      String
  platform    SocialPlatform
  link        String
  displayText String?

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum NotificationType {
  FOLLOW
  RAP_COMMENT
  RAP_VOTE
  COMMENT_VOTE
}

model Notification {
  id           String           @id @default(cuid())
  recipientId  String
  recipient    User             @relation("UserRelation", fields: [recipientId], references: [id], onDelete: Cascade)
  type         NotificationType
  read         Boolean          @default(false)
  createdAt    DateTime         @default(now())
  notifierId   String
  notifierUser User             @relation("NotifierRelation", fields: [notifierId], references: [id], onDelete: Cascade)

  rapId String?
  rap   Rap?    @relation(fields: [rapId], references: [id], onDelete: Cascade)

  commentId String?
  comment   RapComment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  rapVoteId String?
  rapVote   RapVote? @relation(fields: [rapVoteId], references: [id], onDelete: Cascade)

  commentVoteId String?
  commentVote   CommentVote? @relation(fields: [commentVoteId], references: [id], onDelete: Cascade)

  @@index([recipientId, createdAt(sort: Desc)])
}

model Article {
  id          Int      @id @default(autoincrement())
  title       String
  subtitle    String
  content     String   @db.Text
  bannerImage String
  publishedAt DateTime @default(now())
  viewCount   Int      @default(0)
  slug        String   @unique
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

enum RapStatus {
  DRAFT
  PUBLISHED
}

enum Region {
  ALL
  WEST
  MIDWEST
  SOUTH
  EAST
}

enum SocialPlatform {
  TWITTER
  INSTAGRAM
  FACEBOOK
  YOUTUBE
  SOUNDCLOUD
  SPOTIFY
  TIKTOK
  CUSTOM
}
